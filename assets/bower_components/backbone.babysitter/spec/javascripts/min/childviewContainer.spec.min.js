describe("childview container",function(){describe("when providing an array of views to the constructor",function(){var e;beforeEach(function(){var n=[new Backbone.View,new Backbone.View,new Backbone.View];e=new Backbone.ChildViewContainer(n)}),it("should add all of the views",function(){expect(e.length).toBe(3)})}),describe("when adding a view that does not have a model to the container",function(){var e,n,i,o;beforeEach(function(){n=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(n),i=e.findByCid(n.cid),o=e.findByIndex(0)}),it("should make the view retrievable by the view's cid",function(){expect(i).toBe(n)}),it("should make the view retrievable by numeric index",function(){expect(o).toBe(n)}),it("should update the size of the chidren",function(){expect(e.length).toBe(1)})}),describe("when adding a view that has a model, to the container",function(){var e,n,i,o;beforeEach(function(){o=new Backbone.Model,n=new Backbone.View({model:o}),e=new Backbone.ChildViewContainer,e.add(n),i=e.findByModel(o)}),it("should make the view retrievable by the model",function(){expect(i).toBe(n)})}),describe("when adding a view with a custom index value",function(){var e,n,i;beforeEach(function(){n=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(n,"custom indexer"),i=e.findByCustom("custom indexer")}),it("should make the view retrievable by the custom indexer",function(){expect(i).toBe(n)})}),describe("when removing a view",function(){var e,n,i,o;beforeEach(function(){i=new Backbone.Model,o="custome indexer",n=new Backbone.View({model:i}),e=new Backbone.ChildViewContainer,e.add(n,o),e.remove(n)}),it("should update the size of the chidren",function(){expect(e.length).toBe(0)}),it("should remove the index by model",function(){var n=e.findByModel(i);expect(n).toBeUndefined()}),it("should remove the index by custom",function(){var n=e.findByCustom(o);expect(n).toBeUndefined()}),it("should remove the view from the container",function(){var i=e.findByCid(n.cid);expect(i).toBeUndefined()})}),describe("adding or removing a view",function(){var e,n,i;beforeEach(function(){i=new Backbone.Model,n=new Backbone.View({model:i}),e=new Backbone.ChildViewContainer}),it("should return itself when adding, for chaining methods",function(){expect(e.add(n)).toBe(e)}),it("should return itself when removing, for chaining methods",function(){expect(e.remove(n)).toBe(e)})}),describe("when a container has 2 views in it",function(){describe("and applying a method with parameters",function(){var e,n,i;beforeEach(function(){n=new Backbone.View,n.someFunc=jasmine.createSpy("some func"),i=new Backbone.View,i.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(n),e.add(i),e.apply("someFunc",["1","2"])}),it("should call that method on the first view",function(){expect(n.someFunc).toHaveBeenCalledWith("1","2")}),it("should call that method on the second view",function(){expect(i.someFunc).toHaveBeenCalledWith("1","2")})}),describe("and calling a method with parameters",function(){var e,n,i;beforeEach(function(){n=new Backbone.View,n.someFunc=jasmine.createSpy("some func"),i=new Backbone.View,i.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(n),e.add(i),e.call("someFunc","1","2")}),it("should call that method on the first view",function(){expect(n.someFunc).toHaveBeenCalledWith("1","2")}),it("should call that method on the second view",function(){expect(i.someFunc).toHaveBeenCalledWith("1","2")})}),describe("and calling a method that doesn't exist on one of the views",function(){var e,n,i;beforeEach(function(){n=new Backbone.View,i=new Backbone.View,i.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(n),e.add(i),e.call("someFunc","1","2")}),it("should call that method on the second view",function(){expect(i.someFunc).toHaveBeenCalledWith("1","2")})})}),describe("iterators and collection functions",function(){var e,n,i;beforeEach(function(){i=[],n=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(n),e.each(function(e){i.push(e)})}),it("should provide a .each iterator",function(){expect(_.isFunction(e.each)).toBe(!0)}),it("should iterate the views with the .each function",function(){expect(i[0]).toBe(n)})})});