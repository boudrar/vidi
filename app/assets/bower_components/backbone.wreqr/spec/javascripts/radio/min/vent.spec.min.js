describe("radio.vent",function(){describe(".off",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"on"),Wreqr.radio.vent.on(t,r,o,n)}),afterEach(function(){i.restore()}),it("should forward the call to the corresponding Channel vent method",function(){expect(i).toHaveBeenCalledOnce()}),it("should pass the correct arguments to vent.on",function(){expect(i).toHaveBeenCalledWith(r,o,n)})}),describe(".off with no additional arguments",function(){var e,t,n;beforeEach(function(){t="test",e=Wreqr.radio.channel(t),n=sinon.stub(e.vent,"off"),Wreqr.radio.vent.off(t)}),afterEach(function(){n.restore()}),it("should forward the call to the Channel vent `off` method",function(){expect(n).toHaveBeenCalledOnce()})}),describe("Passing additional arguments to the `off` function",function(){var e,t,n,o,r;beforeEach(function(){t="test",n=function(){},o="some:event",e=Wreqr.radio.channel(t),r=sinon.stub(e.vent,"off"),Wreqr.radio.vent.off(t,o,n)}),afterEach(function(){r.restore()}),it("should pass them along to vent.off",function(){expect(r).toHaveBeenCalledWith(o,n)})}),describe(".once",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"once"),Wreqr.radio.vent.once(t,r,o,n)}),afterEach(function(){i.restore()}),it("should forward the call to the Channel vent `once`",function(){expect(i).toHaveBeenCalledOnce()}),it("should pass the correct arguments to vent.once",function(){expect(i).toHaveBeenCalledWith(r,o,n)})}),describe(".trigger",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"trigger"),Wreqr.radio.vent.trigger(t,r,o,n,!0,"2")}),afterEach(function(){i.restore()}),it("should forward the call to the Channel vent `trigger`",function(){expect(i).toHaveBeenCalledOnce()}),it("should pass the correct arguments to vent.trigger",function(){expect(i).toHaveBeenCalledWith(r,o,n,!0,"2")})}),describe(".stopListening with no extra arguments",function(){var e,t,n;beforeEach(function(){t="test",e=Wreqr.radio.channel(t),n=sinon.stub(e.vent,"stopListening"),Wreqr.radio.vent.stopListening(t)}),afterEach(function(){n.restore()}),it("should forward the call to the Channel vent `stopListening`",function(){expect(n).toHaveBeenCalledOnce()})}),describe(".stopListening with additional arguments",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"stopListening"),Wreqr.radio.vent.stopListening(t,r,o,n)}),afterEach(function(){i.restore()}),it("should pass the correct arguments to vent.trigger",function(){expect(i).toHaveBeenCalledWith(r,o,n)})}),describe(".listenTo",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"listenTo"),Wreqr.radio.vent.listenTo(t,r,o,n,!0,"2")}),afterEach(function(){i.restore()}),it("should forward the call to the Channel vent `trigger`",function(){expect(i).toHaveBeenCalledOnce()}),it("should pass the correct arguments to vent.trigger",function(){expect(i).toHaveBeenCalledWith(r,o,n,!0,"2")})}),describe(".listenToOnce",function(){var e,t,n,o,r,i;beforeEach(function(){t="test",o=function(){},r="some:event",n={test:!0,testTwo:!1},e=Wreqr.radio.channel(t),i=sinon.stub(e.vent,"listenToOnce"),Wreqr.radio.vent.listenToOnce(t,r,o,n,!0,"2")}),afterEach(function(){i.restore()}),it("should forward the call to the Channel vent `listenToOnce`",function(){expect(i).toHaveBeenCalledOnce()}),it("should pass the correct arguments to vent.listenToOnce",function(){expect(i).toHaveBeenCalledWith(r,o,n,!0,"2")})})});