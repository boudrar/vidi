describe("handlers",function(){describe("when adding a handler",function(){var e,n,r,a;beforeEach(function(){e=new Wreqr.Handlers,spyOn(e,"trigger"),a={},r=jasmine.createSpy("a setHandlered handler"),e.setHandler("foo",r,a),n=e.getHandler("foo"),n()}),it("should trigger a handler:add event",function(){expect(e.trigger).toHaveBeenCalledWith("handler:add","foo",r,a)})}),describe("when requesting a handler by name",function(){describe("and a handler has been setHandlered with that name",function(){var e,n,r;beforeEach(function(){var a=new Wreqr.Handlers;r={},n=jasmine.createSpy("a setHandlered handler"),a.setHandler("handler",n,r),e=a.getHandler("handler"),e()}),it("should return the setHandlered handler callback",function(){expect(n).toHaveBeenCalled()}),it("should return the setHandlered handler context",function(){expect(n.mostRecentCall.object).toBe(r)})}),describe("and a handler has not been setHandlered with that name",function(){var e,n;beforeEach(function(){e=new Wreqr.Handlers,n=e.getHandler()}),it("should thrown an error saying a handler was not found",function(){expect(n).toBeUndefined})})}),describe("when removing a named handler",function(){var e,n,r,a;beforeEach(function(){e=new Wreqr.Handlers,r={},n=jasmine.createSpy("a setHandlered handler"),e.setHandler("handler",n,r),e.removeHandler("handler"),a=e.getHandler("handler")}),it("should no longer return the requested hander",function(){expect(a).toBeUndefined})}),describe("when removing all handlers",function(){var e,n,r,a,d;beforeEach(function(){e=new Wreqr.Handlers,r={},n=jasmine.createSpy("a setHandlered handler"),e.setHandler("handler1",n,r),e.setHandler("handler2",n,r),e.removeAllHandlers(),a=e.getHandler("handler1"),d=e.getHandler("handler2")}),it("should no longer return the requested handler",function(){expect(a).toBeUndefined,expect(d).toBeUndefined})})});